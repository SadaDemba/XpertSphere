name: Backend Monolith API CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "src/backend/XpertSphere.MonolithApi/**"
      - "XpertSphere.sln"
      - "docker/backend/monolith-api/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/backend/XpertSphere.MonolithApi/**"
      - "XpertSphere.sln"
      - "docker/backend/monolith-api/**"
  workflow_dispatch:

env:
  REGISTRY: acrxpertspheredev.azurecr.io
  IMAGE_NAME: monolith-api

jobs:
  # Validation pour les PR (pas de build Docker)
  validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Restore dependencies
        run: dotnet restore src/backend/XpertSphere.MonolithApi/XpertSphere.MonolithApi.csproj

      - name: Build
        run: dotnet build src/backend/XpertSphere.MonolithApi/XpertSphere.MonolithApi.csproj --no-restore

      - name: Test
        run: dotnet test src/backend/XpertSphere.MonolithApi.Tests/XpertSphere.MonolithApi.Tests.csproj --no-build --verbosity normal --collect:"XPlat Code Coverage"

  # Build et push pour main/develop
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR using Azure CLI
        run: |
          echo "Login to ACR using Azure CLI..."
          az acr login --name acrxpertspheredev

      - name: Build and Push
        run: |
          docker build \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -f docker/backend/monolith-api/Dockerfile .

          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
