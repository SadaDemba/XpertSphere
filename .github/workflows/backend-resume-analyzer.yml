name: Backend Resume Analyzer CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "src/backend/XpertSphere.ResumeAnalyzer/**"
      - "docker/backend/resume-analyzer/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/backend/XpertSphere.ResumeAnalyzer/**"
      - "docker/backend/resume-analyzer/**"
  workflow_dispatch:

env:
  REGISTRY: acrxpertspheredev.azurecr.io
  IMAGE_NAME: resume-analyzer

jobs:
  validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        working-directory: src/backend/XpertSphere.ResumeAnalyzer
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        working-directory: src/backend/XpertSphere.ResumeAnalyzer
        run: |
          # Install flake8 if not in requirements
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test with pytest
        working-directory: src/backend/XpertSphere.ResumeAnalyzer
        run: |
          pip install pytest pytest-asyncio
          pytest tests/ -v || echo "No tests found or tests failed"

  # Build et push pour main/develop
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR using Azure CLI
        run: |
          echo "Login to ACR using Azure CLI..."
          az acr login --name acrxpertspheredev

      - name: Build and Push
        run: |
          docker build \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -f docker/backend/resume-analyzer/Dockerfile .

          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Cleanup old images
        run: |
          echo "üßπ Starting cleanup of old images..."

          ALL_TAGS=$(az acr repository show-tags \
            --name acrxpertspheredev \
            --repository ${{ env.IMAGE_NAME }} \
            --orderby time_desc \
            --output tsv | grep -v "^latest$")

          echo "All tags found (excluding 'latest'):"
          echo "$ALL_TAGS"

          TAGS_TO_DELETE=$(echo "$ALL_TAGS" | tail -n +6)

          if [ -z "$TAGS_TO_DELETE" ]; then
            echo "‚úÖ No tags to delete. Less than 5 images exist."
          else
            echo "üóëÔ∏è Tags to delete:"
            echo "$TAGS_TO_DELETE"
            
            for TAG in $TAGS_TO_DELETE; do
              if [ ! -z "$TAG" ]; then
                echo "Deleting tag: $TAG"
                az acr repository delete \
                  --name acrxpertspheredev \
                  --repository ${{ env.IMAGE_NAME }} \
                  --tag "$TAG" \
                  --yes || echo "‚ö†Ô∏è Failed to delete tag: $TAG"
              fi
            done
            
            echo "‚úÖ Cleanup completed!"
          fi

          echo "üìã Remaining tags after cleanup:"
          az acr repository show-tags \
            --name acrxpertspheredev \
            --repository ${{ env.IMAGE_NAME }} \
            --output table
