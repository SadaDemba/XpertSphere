name: Backend Resume Analyzer CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - "src/backend/XpertSphere.ResumeAnalyzer/**"
      - "docker/backend/resume-analyzer/**"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/backend/XpertSphere.ResumeAnalyzer/**"
      - "docker/backend/resume-analyzer/**"
  workflow_dispatch:

env:
  REGISTRY: acrxpertspheredev.azurecr.io
  IMAGE_NAME: resume-analyzer

jobs:
  # Tests et validation pour les PR
  validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        working-directory: src/backend/XpertSphere.ResumeAnalyzer
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with pytest
        working-directory: src/backend/XpertSphere.ResumeAnalyzer
        env:
          PYTHONPATH: .
          AZURE_OPENAI_API_KEY: test-key
          AZURE_OPENAI_ENDPOINT: https://test-endpoint
          ENVIRONMENT: test
        run: |
          pytest

  # Build et push pour main/develop
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR using Azure CLI
        run: |
          echo "üîê Login to ACR using Azure CLI..."
          az acr login --name acrxpertspheredev

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/backend/resume-analyzer/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Test container health
        run: |
          echo "ü©∫ Testing container health..."
          # Test if the image can start properly
          docker run --rm -d --name test-resume-analyzer -p 8001:8000 \
            -e AZURE_OPENAI_API_KEY=test-key \
            -e ENVIRONMENT=test \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Wait for container to start
          sleep 15

          # Test health endpoint
          if curl -f http://localhost:8001/api/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            docker logs test-resume-analyzer
            exit 1
          fi

          # Cleanup
          docker stop test-resume-analyzer

      - name: Cleanup old images
        run: |
          echo "üßπ Starting cleanup of old images..."

          ALL_TAGS=$(az acr repository show-tags \
            --name acrxpertspheredev \
            --repository ${{ env.IMAGE_NAME }} \
            --orderby time_desc \
            --output tsv | grep -v "^latest$")

          echo "All tags found (excluding 'latest'):"
          echo "$ALL_TAGS"

          TAGS_TO_DELETE=$(echo "$ALL_TAGS" | tail -n +6)

          if [ -z "$TAGS_TO_DELETE" ]; then
            echo "‚úÖ No tags to delete. Less than 5 images exist."
          else
            echo "üóëÔ∏è Tags to delete:"
            echo "$TAGS_TO_DELETE"
            
            for TAG in $TAGS_TO_DELETE; do
              if [ ! -z "$TAG" ]; then
                echo "Deleting tag: $TAG"
                az acr repository delete \
                  --name acrxpertspheredev \
                  --repository ${{ env.IMAGE_NAME }} \
                  --tag "$TAG" \
                  --yes || echo "‚ö†Ô∏è Failed to delete tag: $TAG"
              fi
            done
            
            echo "‚úÖ Cleanup completed!"
          fi

          echo "üìã Remaining tags after cleanup:"
          az acr repository show-tags \
            --name acrxpertspheredev \
            --repository ${{ env.IMAGE_NAME }} \
            --output table

  # D√©ploiement en production avec Key Vault
  deploy-to-azure:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: build-and-push

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Container Apps
        run: |
          echo "üöÄ Deploying to Azure Container Apps with Key Vault..."

          # R√©cup√©rer l'ID de la Managed Identity
          IDENTITY_ID=$(az identity show \
            --name "id-xpertsphere-resume-analyzer" \
            --resource-group "rg-xpertsphere-dev" \
            --query id -o tsv)

          # V√©rifier si Container App existe
          if az containerapp show --name "ca-resume-analyzer" --resource-group "rg-xpertsphere-dev" &>/dev/null; then
            echo "üìù Updating existing Container App..."
            az containerapp update \
              --name "ca-resume-analyzer" \
              --resource-group "rg-xpertsphere-dev" \
              --image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
              --user-assigned "$IDENTITY_ID" \
              --env-vars \
                ENVIRONMENT=production \
                KEY_VAULT_URL=https://kv-xpertsphere-dev.vault.azure.net/
          else
            echo "üÜï Creating new Container App..."
            az containerapp create \
              --name "ca-resume-analyzer" \
              --resource-group "rg-xpertsphere-dev" \
              --environment "cae-xpertsphere-dev" \
              --image "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" \
              --user-assigned "$IDENTITY_ID" \
              --registry-server "${{ env.REGISTRY }}" \
              --env-vars \
                ENVIRONMENT=production \
                KEY_VAULT_URL=https://kv-xpertsphere-dev.vault.azure.net/ \
              --cpu 0.5 \
              --memory 1.0Gi \
              --min-replicas 1 \
              --max-replicas 3 \
              --ingress external \
              --target-port 8000 \
              --transport http
          fi

          echo "‚úÖ Deployment completed!"

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # Attendre que l'app soit pr√™te
          sleep 30

          # R√©cup√©rer l'URL de l'app
          APP_URL=$(az containerapp show \
            --name "ca-resume-analyzer" \
            --resource-group "rg-xpertsphere-dev" \
            --query properties.configuration.ingress.fqdn -o tsv)

          echo "üåê Application URL: https://$APP_URL"

          # Test de sant√©
          if curl -f "https://$APP_URL/api/health"; then
            echo "‚úÖ Production health check passed!"
          else
            echo "‚ùå Production health check failed!"
            exit 1
          fi
