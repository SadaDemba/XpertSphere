name: Deploy Monolith API to Azure Container Apps

on:
  workflow_run:
    workflows: ["Backend Monolith API CI/CD"]
    types:
      - completed
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      force_recreate:
        description: "Force recreate container (delete and recreate)"
        required: false
        default: false
        type: boolean

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'develop') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy monolith-api to STAGING
        run: |
          echo "ðŸŸ¡ === Deploying monolith-api to STAGING ==="

          # Variables for staging
          APP_NAME="aca-monolith-api-staging"
          ENVIRONMENT_NAME="aca-env-xpertsphere-dev"

          # Use the SHA of workflow trigger
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            IMAGE_TAG="${{ github.event.workflow_run.head_sha }}"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi

          if az containerapp show --name $APP_NAME --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "Container app exists, updating..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image acrxpertspheredev.azurecr.io/monolith-api:$IMAGE_TAG \
              --set-env-vars ASPNETCORE_ENVIRONMENT=Staging \
                            ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING_STAGING }}" \
                            Redis__ConnectionString="${{ secrets.REDIS_CONNECTION_STRING_STAGING }}"
          else
            echo "Container app doesn't exist, creating..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --environment $ENVIRONMENT_NAME \
              --image acrxpertspheredev.azurecr.io/monolith-api:$IMAGE_TAG \
              --registry-server acrxpertspheredev.azurecr.io \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --target-port 8080 \
              --ingress external \
              --env-vars ASPNETCORE_ENVIRONMENT=Staging \
                         ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING_STAGING }}" \
                         Redis__ConnectionString="${{ secrets.REDIS_CONNECTION_STRING_STAGING }}" \
              --cpu 0.5 \
              --memory 1Gi \
              --min-replicas 0 \
              --max-replicas 3
          fi

      - name: Get staging URL
        run: |
          echo "ðŸŽ‰ monolith-api deployed to STAGING successfully!"
          echo "ðŸ”— Staging URL: https://$(az containerapp show --name $APP_NAME --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query 'properties.latestRevisionFqdn' -o tsv)"

  deploy-production:
    runs-on: ubuntu-latest
    if: ${{ (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production') }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy monolith-api to PRODUCTION
        run: |
          echo "ðŸŸ¢ === Deploying monolith-api to PRODUCTION ==="

          # Variables for production
          APP_NAME="xpertsphere-monolith-api"
          ENVIRONMENT_NAME="aca-env-xpertsphere-prod"

          # Use the SHA of workflow trigger
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            IMAGE_TAG="${{ github.event.workflow_run.head_sha }}"
          else
            IMAGE_TAG="${{ github.sha }}"
          fi

          if az containerapp show --name $APP_NAME --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} > /dev/null 2>&1; then
            echo "Container app exists, updating..."
            az containerapp update \
              --name $APP_NAME \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image acrxpertspheredev.azurecr.io/monolith-api:$IMAGE_TAG \
              --set-env-vars ASPNETCORE_ENVIRONMENT=Production \
                            ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING_PRODUCTION }}" \
                            Redis__ConnectionString="${{ secrets.REDIS_CONNECTION_STRING_PRODUCTION }}"
          else
            echo "Container app doesn't exist, creating..."
            az containerapp create \
              --name $APP_NAME \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --environment $ENVIRONMENT_NAME \
              --image acrxpertspheredev.azurecr.io/monolith-api:$IMAGE_TAG \
              --registry-server acrxpertspheredev.azurecr.io \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --target-port 8080 \
              --ingress external \
              --env-vars ASPNETCORE_ENVIRONMENT=Production \
                         ConnectionStrings__DefaultConnection="${{ secrets.CONNECTION_STRING_PRODUCTION }}" \
                         Redis__ConnectionString="${{ secrets.REDIS_CONNECTION_STRING_PRODUCTION }}" \
              --cpu 1.0 \
              --memory 2Gi \
              --min-replicas 1 \
              --max-replicas 5
          fi

      - name: Get production URL
        run: |
          echo "ðŸŽ‰ monolith-api deployed to PRODUCTION successfully!"
          echo "ðŸ”— Production URL: https://$(az containerapp show --name $APP_NAME --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --query 'properties.latestRevisionFqdn' -o tsv)"
