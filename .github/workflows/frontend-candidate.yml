name: Candidate App CI

on:
  push:
    branches: [main, develop]
    paths:
      - "src/frontend/packages/candidate-app/**"
      - "src/frontend/package*.json"
      - "src/frontend/eslint.config.mjs"
      - "src/frontend/.prettierrc"
  pull_request:
    branches: [main, develop]
    paths:
      - "src/frontend/packages/candidate-app/**"
      - "src/frontend/package*.json"
      - "src/frontend/eslint.config.mjs"
      - "src/frontend/.prettierrc"
  workflow_dispatch:

env:
  REGISTRY: acrxpertspheredev.azurecr.io
  IMAGE_NAME: candidate-app

jobs:
  # ‚úÖ Job de validation pour les PR (rapide, pas de build Docker)
  validate:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "src/frontend/package-lock.json"

      - name: Install dependencies (monorepo)
        working-directory: src/frontend
        run: npm ci

      - name: Format check
        working-directory: src/frontend
        run: npm run format:check

      - name: Lint (all workspaces)
        working-directory: src/frontend
        run: npm run lint

      - name: Test (all workspaces)
        working-directory: src/frontend
        run: npm run test

      - name: Build check (candidate-app only)
        working-directory: src/frontend
        run: npm run build:candidate

  # ‚úÖ Job de build et push seulement pour main/develop
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure CLI
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and Push
        run: |
          docker build \
            --build-arg VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            -f docker/candidate-app/Dockerfile .

          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      - name: Cleanup old images
        run: |
          echo "üßπ Starting cleanup of old images..."

          # R√©cup√©rer tous les tags sauf 'latest', tri√©s par date (plus r√©cent en premier)
          ALL_TAGS=$(az acr repository show-tags \
            --name acrxpertspheredev \
            --repository ${{ env.IMAGE_NAME }} \
            --orderby time_desc \
            --output tsv | grep -v "^latest$")

          echo "All tags found (excluding 'latest'):"
          echo "$ALL_TAGS"

          # Garder les 4 plus r√©cents, supprimer le reste
          TAGS_TO_DELETE=$(echo "$ALL_TAGS" | tail -n +5)

          if [ -z "$TAGS_TO_DELETE" ]; then
            echo "‚úÖ No tags to delete. Less than 4 images exist."
          else
            echo "üóëÔ∏è Tags to delete:"
            echo "$TAGS_TO_DELETE"
            
            # Supprimer chaque tag
            for TAG in $TAGS_TO_DELETE; do
              if [ ! -z "$TAG" ]; then
                echo "Deleting tag: $TAG"
                az acr repository delete \
                  --name acrxpertspheredev \
                  --repository ${{ env.IMAGE_NAME }} \
                  --tag "$TAG" \
                  --yes || echo "‚ö†Ô∏è Failed to delete tag: $TAG"
              fi
            done
            
            echo "‚úÖ Cleanup completed!"
          fi

          # Afficher les tags restants
          echo "üìã Remaining tags after cleanup:"
          az acr repository show-tags \
            --name acrxpertspheredev \
            --repository ${{ env.IMAGE_NAME }} \
            --output table
