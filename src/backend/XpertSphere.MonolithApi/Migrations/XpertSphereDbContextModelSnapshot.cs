// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using XpertSphere.MonolithApi.Data;

#nullable disable

namespace XpertSphere.MonolithApi.Migrations
{
    [DbContext(typeof(XpertSphereDbContext))]
    partial class XpertSphereDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Base.AuditableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("AuditableEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Organization", b =>
                {
                    b.HasBaseType("XpertSphere.MonolithApi.Models.Base.AuditableEntity");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Size")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("IX_Organizations_Code")
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("Industry")
                        .HasDatabaseName("IX_Organizations_Industry");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Organizations_IsActive");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Organizations_Name");

                    b.HasIndex("Size")
                        .HasDatabaseName("IX_Organizations_Size");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Permission", b =>
                {
                    b.HasBaseType("XpertSphere.MonolithApi.Models.Base.AuditableEntity");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Category")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Resource")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Scope")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("Category")
                        .HasDatabaseName("IX_Permissions_Category");

                    b.HasIndex("Resource")
                        .HasDatabaseName("IX_Permissions_Resource");

                    b.HasIndex("Resource", "Action", "Scope")
                        .IsUnique()
                        .HasDatabaseName("IX_Permissions_Resource_Action_Scope")
                        .HasFilter("[Resource] IS NOT NULL AND [Action] IS NOT NULL AND [Scope] IS NOT NULL");

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Role", b =>
                {
                    b.HasBaseType("XpertSphere.MonolithApi.Models.Base.AuditableEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Roles_IsActive");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("IX_Roles_Name")
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.RolePermission", b =>
                {
                    b.HasBaseType("XpertSphere.MonolithApi.Models.Base.AuditableEntity");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("IX_RolePermissions_PermissionId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_RolePermissions_RoleId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique()
                        .HasDatabaseName("IX_RolePermissions_RoleId_PermissionId")
                        .HasFilter("[RoleId] IS NOT NULL AND [PermissionId] IS NOT NULL");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.User", b =>
                {
                    b.HasBaseType("XpertSphere.MonolithApi.Models.Base.AuditableEntity");

                    b.Property<DateTime?>("Availability")
                        .HasColumnType("datetime2");

                    b.Property<string>("CvPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Department")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("DesiredSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LinkedInProfile")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Skills")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_Email")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("LastLoginAt")
                        .HasDatabaseName("IX_Users_LastLoginAt");

                    b.HasIndex("UserType")
                        .HasDatabaseName("IX_Users_UserType");

                    b.HasIndex("OrganizationId", "EmployeeId")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_OrganizationId_EmployeeId")
                        .HasFilter("[OrganizationId] IS NOT NULL AND [EmployeeId] IS NOT NULL");

                    b.ToTable("Users", null, t =>
                        {
                            t.HasCheckConstraint("CK_User_DesiredSalary", "[DesiredSalary] IS NULL OR [DesiredSalary] > 0");

                            t.HasCheckConstraint("CK_User_Experience", "[Experience] IS NULL OR [Experience] >= 0");

                            t.HasCheckConstraint("CK_User_Internal_OrganizationRequired", "([UserType] = 'INTERNAL') OR ([UserType] = 'EXTERNAL' AND [OrganizationId] IS NULL)");
                        });
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.UserRole", b =>
                {
                    b.HasBaseType("XpertSphere.MonolithApi.Models.Base.AuditableEntity");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("AssignedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("AssignedAt")
                        .HasDatabaseName("IX_UserRoles_AssignedAt");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("IX_UserRoles_ExpiresAt");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_UserRoles_IsActive");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId", "RoleId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserRoles_UserId_RoleId")
                        .HasFilter("[UserId] IS NOT NULL AND [RoleId] IS NOT NULL");

                    b.ToTable("UserRoles", null, t =>
                        {
                            t.HasCheckConstraint("CK_UserRole_ExpiresAt", "[ExpiresAt] IS NULL OR [ExpiresAt] > [AssignedAt]");
                        });
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Base.AuditableEntity", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("XpertSphere.MonolithApi.Models.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Organization", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.Base.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("XpertSphere.MonolithApi.Models.Organization", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("XpertSphere.MonolithApi.Models.Base.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("OrganizationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_AddressLine2");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("France")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Address_PostalCode");

                            b1.Property<string>("Region")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_Region");

                            b1.Property<string>("StreetName")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Address_StreetName");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Address_StreetNumber");

                            b1.HasKey("OrganizationId");

                            b1.ToTable("Organizations");

                            b1.WithOwner()
                                .HasForeignKey("OrganizationId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Permission", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.Base.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("XpertSphere.MonolithApi.Models.Permission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Role", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.Base.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("XpertSphere.MonolithApi.Models.Role", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.RolePermission", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.Base.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("XpertSphere.MonolithApi.Models.RolePermission", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpertSphere.MonolithApi.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XpertSphere.MonolithApi.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.User", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.Base.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("XpertSphere.MonolithApi.Models.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpertSphere.MonolithApi.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("XpertSphere.MonolithApi.Models.Base.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("AddressLine2")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_AddressLine2");

                            b1.Property<string>("City")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_City");

                            b1.Property<string>("Country")
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasDefaultValue("France")
                                .HasColumnName("Address_Country");

                            b1.Property<string>("PostalCode")
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Address_PostalCode");

                            b1.Property<string>("Region")
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)")
                                .HasColumnName("Address_Region");

                            b1.Property<string>("StreetName")
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)")
                                .HasColumnName("Address_StreetName");

                            b1.Property<string>("StreetNumber")
                                .HasMaxLength(10)
                                .HasColumnType("nvarchar(10)")
                                .HasColumnName("Address_StreetNumber");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.UserRole", b =>
                {
                    b.HasOne("XpertSphere.MonolithApi.Models.User", "AssignedByUser")
                        .WithMany()
                        .HasForeignKey("AssignedBy")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("XpertSphere.MonolithApi.Models.Base.AuditableEntity", null)
                        .WithOne()
                        .HasForeignKey("XpertSphere.MonolithApi.Models.UserRole", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("XpertSphere.MonolithApi.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("XpertSphere.MonolithApi.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedByUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Organization", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("XpertSphere.MonolithApi.Models.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
